---
title: "Random Ron: Async and Await"
order: 10
date: 2021-06-18
methods: ['async', 'await', 'Async code structure', 'try... catch']
templateEngineOverride: njk, md
---

{% set html %}
<img alt="Ron Swanson standing in front of a buffet stating, 'I've said too much.'" src="https://giphygifs.s3.amazonaws.com/media/iofbYa67AbBg4/giphy.gif">
<div data-app>
    <blockquote data-quote aria-live="polite">
        <em>Any dog under 50 pounds is a cat, and cats are useless.</em>
    </blockquote>
    <p>This project is not a cat if your Javascript isn't working because you still get a quote!</p>
</div>
{% endset %}

{% set js %}
{% include jsFile %}
{% endset %}


{% set description %}
This one was not complicated as it was just a project of refactoring what I had. 
I have to say that I like this structure a little better because I think I understand
it better. The other one is a completely new structure while this one is very similar
to the usual structure that I'm used to for every other function.

However, the idea of adding a 'then' function also makes to this asynchronous and
directly shows you it goes after. With this structure it is easy to forget something
is asynchronous and forget the await operator. I actually forgot the `response.json()`
part was asynchronous and just left it there. It took me some time to realize what
was happening. 

I need to work more on this to decide which approach works better for me. In principle,
I like more the async/await structure, but I think the promise chain may be better for
really handling async correctly and reduce bugs. Based on that, the chain would be better,
but let's wait and see what time and more projects have to tell.
{% endset %}


{% include "project.njk" %}
